@model TelerikMovies.Web.Areas.Admin.Models.MovieCreateViewModel

@{
    ViewBag.Title = "Create Movie";
}

<h2>Create</h2>


@using (Html.BeginForm("Create", "Movies"))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Movie</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ReleaseDate, htmlAttributes: new { @class = "control-label col-md-2 " })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ReleaseDate, new { htmlAttributes = new { @class = "form-control datepicker" } })
                @Html.ValidationMessageFor(model => model.ReleaseDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ImgUrl, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ImgUrl, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ImgUrl, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TrailerUrl, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TrailerUrl, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TrailerUrl, "", new { @class = "text-danger" })
            </div>
        </div>
        @if (Model.Genres.Count() == 0)
        {
            <div class="form-group genre">
                <label class="control-label col-md-2" for="Genre1">Genre</label>
                <div class="col-md-10">
                    <input class="form-control text-box single-line" data-val="true" data-val-maxlength="The field Genre must be a string." data-val-maxlength-max="500" data-val-required="The Genre field is required." id="Genre1" name="Genres[0].Name" type="text" value="">
                    <span class="field-validation-valid text-danger" data-valmsg-for="Genres[0].Name" data-valmsg-replace="true"></span>
                </div>
            </div>
        }
        else {

            for (int i = 0; i < Model.Genres.Count(); i++)
            {
                <div class="form-group genre">
                    @Html.LabelFor(x => Model.Genres[i].Name, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @if (Model.Genres[i].Name == null)
                        {
                            <input class="form-control text-box single-line" data-val="true" data-val-maxlength="The field Genre must be a string." data-val-maxlength-max="500" data-val-required="The Genre field is required." id="Genre@(i+1)" name="Genres[@(i)].Name" type="text" value="">
                            <span class="field-validation-valid text-danger" data-valmsg-for="Genres[@(i)].Name" data-valmsg-replace="true"></span>
                        }
                        else {
                            @Html.EditorFor(x => Model.Genres[i].Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(x => x.Genres[i].Name, "", new { @class = "text-danger" })
                        }

                    </div>
                </div>
            }
        }

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button type="button" class="btn btn-primary" id="AddGenre">Add</button>
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/PageScripts/CreateMovie.js"></script>
}
